// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DuelHeartLevelInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MiHomo.Protos {

  /// <summary>Holder for reflection information generated from DuelHeartLevelInfo.proto</summary>
  public static partial class DuelHeartLevelInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for DuelHeartLevelInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DuelHeartLevelInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhEdWVsSGVhcnRMZXZlbEluZm8ucHJvdG8SDW1pSG9tby5Qcm90b3MaIkR1",
            "ZWxIZWFydExldmVsRGlmZmljdWx0eUluZm8ucHJvdG8imAEKEkR1ZWxIZWFy",
            "dExldmVsSW5mbxJJChRkaWZmaWN1bHR5X2luZm9fbGlzdBgNIAMoCzIrLm1p",
            "SG9tby5Qcm90b3MuRHVlbEhlYXJ0TGV2ZWxEaWZmaWN1bHR5SW5mbxIUCgxp",
            "c19jZ192aWV3ZWQYBSABKAgSDwoHaXNfb3BlbhgLIAEoCBIQCghsZXZlbF9p",
            "ZBgEIAEoDWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::MiHomo.Protos.DuelHeartLevelDifficultyInfoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MiHomo.Protos.DuelHeartLevelInfo), global::MiHomo.Protos.DuelHeartLevelInfo.Parser, new[]{ "DifficultyInfoList", "IsCgViewed", "IsOpen", "LevelId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DuelHeartLevelInfo : pb::IMessage<DuelHeartLevelInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DuelHeartLevelInfo> _parser = new pb::MessageParser<DuelHeartLevelInfo>(() => new DuelHeartLevelInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DuelHeartLevelInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MiHomo.Protos.DuelHeartLevelInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DuelHeartLevelInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DuelHeartLevelInfo(DuelHeartLevelInfo other) : this() {
      difficultyInfoList_ = other.difficultyInfoList_.Clone();
      isCgViewed_ = other.isCgViewed_;
      isOpen_ = other.isOpen_;
      levelId_ = other.levelId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DuelHeartLevelInfo Clone() {
      return new DuelHeartLevelInfo(this);
    }

    /// <summary>Field number for the "difficulty_info_list" field.</summary>
    public const int DifficultyInfoListFieldNumber = 13;
    private static readonly pb::FieldCodec<global::MiHomo.Protos.DuelHeartLevelDifficultyInfo> _repeated_difficultyInfoList_codec
        = pb::FieldCodec.ForMessage(106, global::MiHomo.Protos.DuelHeartLevelDifficultyInfo.Parser);
    private readonly pbc::RepeatedField<global::MiHomo.Protos.DuelHeartLevelDifficultyInfo> difficultyInfoList_ = new pbc::RepeatedField<global::MiHomo.Protos.DuelHeartLevelDifficultyInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::MiHomo.Protos.DuelHeartLevelDifficultyInfo> DifficultyInfoList {
      get { return difficultyInfoList_; }
    }

    /// <summary>Field number for the "is_cg_viewed" field.</summary>
    public const int IsCgViewedFieldNumber = 5;
    private bool isCgViewed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsCgViewed {
      get { return isCgViewed_; }
      set {
        isCgViewed_ = value;
      }
    }

    /// <summary>Field number for the "is_open" field.</summary>
    public const int IsOpenFieldNumber = 11;
    private bool isOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsOpen {
      get { return isOpen_; }
      set {
        isOpen_ = value;
      }
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 4;
    private uint levelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DuelHeartLevelInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DuelHeartLevelInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!difficultyInfoList_.Equals(other.difficultyInfoList_)) return false;
      if (IsCgViewed != other.IsCgViewed) return false;
      if (IsOpen != other.IsOpen) return false;
      if (LevelId != other.LevelId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= difficultyInfoList_.GetHashCode();
      if (IsCgViewed != false) hash ^= IsCgViewed.GetHashCode();
      if (IsOpen != false) hash ^= IsOpen.GetHashCode();
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LevelId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LevelId);
      }
      if (IsCgViewed != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsCgViewed);
      }
      if (IsOpen != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsOpen);
      }
      difficultyInfoList_.WriteTo(output, _repeated_difficultyInfoList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LevelId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LevelId);
      }
      if (IsCgViewed != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsCgViewed);
      }
      if (IsOpen != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsOpen);
      }
      difficultyInfoList_.WriteTo(ref output, _repeated_difficultyInfoList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += difficultyInfoList_.CalculateSize(_repeated_difficultyInfoList_codec);
      if (IsCgViewed != false) {
        size += 1 + 1;
      }
      if (IsOpen != false) {
        size += 1 + 1;
      }
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DuelHeartLevelInfo other) {
      if (other == null) {
        return;
      }
      difficultyInfoList_.Add(other.difficultyInfoList_);
      if (other.IsCgViewed != false) {
        IsCgViewed = other.IsCgViewed;
      }
      if (other.IsOpen != false) {
        IsOpen = other.IsOpen;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 32: {
            LevelId = input.ReadUInt32();
            break;
          }
          case 40: {
            IsCgViewed = input.ReadBool();
            break;
          }
          case 88: {
            IsOpen = input.ReadBool();
            break;
          }
          case 106: {
            difficultyInfoList_.AddEntriesFrom(input, _repeated_difficultyInfoList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 32: {
            LevelId = input.ReadUInt32();
            break;
          }
          case 40: {
            IsCgViewed = input.ReadBool();
            break;
          }
          case 88: {
            IsOpen = input.ReadBool();
            break;
          }
          case 106: {
            difficultyInfoList_.AddEntriesFrom(ref input, _repeated_difficultyInfoList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
