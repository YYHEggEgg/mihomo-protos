// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: InvestigationMonster.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MiHomo.Protos {

  /// <summary>Holder for reflection information generated from InvestigationMonster.proto</summary>
  public static partial class InvestigationMonsterReflection {

    #region Descriptor
    /// <summary>File descriptor for InvestigationMonster.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InvestigationMonsterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpJbnZlc3RpZ2F0aW9uTW9uc3Rlci5wcm90bxINbWlIb21vLlByb3RvcxoM",
            "VmVjdG9yLnByb3RvGiFXZWVrbHlCb3NzUmVzaW5EaXNjb3VudEluZm8ucHJv",
            "dG8irAQKFEludmVzdGlnYXRpb25Nb25zdGVyEhYKDmJvc3NfY2hlc3RfbnVt",
            "GAEgASgNEg8KB2NpdHlfaWQYBiABKA0SEQoIZ3JvdXBfaWQYnQIgASgNEgoK",
            "AmlkGA0gASgNEhAKCGlzX2FsaXZlGAkgASgIEhYKDmlzX2FyZWFfbG9ja2Vk",
            "GA8gASgIEg0KBWxldmVsGAUgASgNEkEKCmxvY2tfc3RhdGUYAiABKA4yLS5t",
            "aUhvbW8uUHJvdG9zLkludmVzdGlnYXRpb25Nb25zdGVyLkxvY2tTdGF0ZRIa",
            "ChJtYXhfYm9zc19jaGVzdF9udW0YBCABKA0SEwoKbW9uc3Rlcl9pZBitAiAB",
            "KA0SJAocbmV4dF9ib3NzX2NoZXN0X3JlZnJlc2hfdGltZRgHIAEoDRIZChFu",
            "ZXh0X3JlZnJlc2hfdGltZRgLIAEoDRIiCgNwb3MYDiABKAsyFS5taUhvbW8u",
            "UHJvdG9zLlZlY3RvchIYChByZWZyZXNoX2ludGVydmFsGAMgASgNEg0KBXJl",
            "c2luGAggASgNEhAKCHNjZW5lX2lkGAogASgNElMKH3dlZWtseV9ib3NzX3Jl",
            "c2luX2Rpc2NvdW50X2luZm8YDCABKAsyKi5taUhvbW8uUHJvdG9zLldlZWts",
            "eUJvc3NSZXNpbkRpc2NvdW50SW5mbyIqCglMb2NrU3RhdGUSDQoJTE9DS19O",
            "T05FEAASDgoKTE9DS19RVUVTVBABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::MiHomo.Protos.VectorReflection.Descriptor, global::MiHomo.Protos.WeeklyBossResinDiscountInfoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MiHomo.Protos.InvestigationMonster), global::MiHomo.Protos.InvestigationMonster.Parser, new[]{ "BossChestNum", "CityId", "GroupId", "Id", "IsAlive", "IsAreaLocked", "Level", "LockState", "MaxBossChestNum", "MonsterId", "NextBossChestRefreshTime", "NextRefreshTime", "Pos", "RefreshInterval", "Resin", "SceneId", "WeeklyBossResinDiscountInfo" }, null, new[]{ typeof(global::MiHomo.Protos.InvestigationMonster.Types.LockState) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InvestigationMonster : pb::IMessage<InvestigationMonster>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InvestigationMonster> _parser = new pb::MessageParser<InvestigationMonster>(() => new InvestigationMonster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InvestigationMonster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MiHomo.Protos.InvestigationMonsterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InvestigationMonster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InvestigationMonster(InvestigationMonster other) : this() {
      bossChestNum_ = other.bossChestNum_;
      cityId_ = other.cityId_;
      groupId_ = other.groupId_;
      id_ = other.id_;
      isAlive_ = other.isAlive_;
      isAreaLocked_ = other.isAreaLocked_;
      level_ = other.level_;
      lockState_ = other.lockState_;
      maxBossChestNum_ = other.maxBossChestNum_;
      monsterId_ = other.monsterId_;
      nextBossChestRefreshTime_ = other.nextBossChestRefreshTime_;
      nextRefreshTime_ = other.nextRefreshTime_;
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      refreshInterval_ = other.refreshInterval_;
      resin_ = other.resin_;
      sceneId_ = other.sceneId_;
      weeklyBossResinDiscountInfo_ = other.weeklyBossResinDiscountInfo_ != null ? other.weeklyBossResinDiscountInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InvestigationMonster Clone() {
      return new InvestigationMonster(this);
    }

    /// <summary>Field number for the "boss_chest_num" field.</summary>
    public const int BossChestNumFieldNumber = 1;
    private uint bossChestNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BossChestNum {
      get { return bossChestNum_; }
      set {
        bossChestNum_ = value;
      }
    }

    /// <summary>Field number for the "city_id" field.</summary>
    public const int CityIdFieldNumber = 6;
    private uint cityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CityId {
      get { return cityId_; }
      set {
        cityId_ = value;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 285;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 13;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "is_alive" field.</summary>
    public const int IsAliveFieldNumber = 9;
    private bool isAlive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAlive {
      get { return isAlive_; }
      set {
        isAlive_ = value;
      }
    }

    /// <summary>Field number for the "is_area_locked" field.</summary>
    public const int IsAreaLockedFieldNumber = 15;
    private bool isAreaLocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAreaLocked {
      get { return isAreaLocked_; }
      set {
        isAreaLocked_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "lock_state" field.</summary>
    public const int LockStateFieldNumber = 2;
    private global::MiHomo.Protos.InvestigationMonster.Types.LockState lockState_ = global::MiHomo.Protos.InvestigationMonster.Types.LockState.LockNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MiHomo.Protos.InvestigationMonster.Types.LockState LockState {
      get { return lockState_; }
      set {
        lockState_ = value;
      }
    }

    /// <summary>Field number for the "max_boss_chest_num" field.</summary>
    public const int MaxBossChestNumFieldNumber = 4;
    private uint maxBossChestNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MaxBossChestNum {
      get { return maxBossChestNum_; }
      set {
        maxBossChestNum_ = value;
      }
    }

    /// <summary>Field number for the "monster_id" field.</summary>
    public const int MonsterIdFieldNumber = 301;
    private uint monsterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    /// <summary>Field number for the "next_boss_chest_refresh_time" field.</summary>
    public const int NextBossChestRefreshTimeFieldNumber = 7;
    private uint nextBossChestRefreshTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NextBossChestRefreshTime {
      get { return nextBossChestRefreshTime_; }
      set {
        nextBossChestRefreshTime_ = value;
      }
    }

    /// <summary>Field number for the "next_refresh_time" field.</summary>
    public const int NextRefreshTimeFieldNumber = 11;
    private uint nextRefreshTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NextRefreshTime {
      get { return nextRefreshTime_; }
      set {
        nextRefreshTime_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 14;
    private global::MiHomo.Protos.Vector pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MiHomo.Protos.Vector Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "refresh_interval" field.</summary>
    public const int RefreshIntervalFieldNumber = 3;
    private uint refreshInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RefreshInterval {
      get { return refreshInterval_; }
      set {
        refreshInterval_ = value;
      }
    }

    /// <summary>Field number for the "resin" field.</summary>
    public const int ResinFieldNumber = 8;
    private uint resin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Resin {
      get { return resin_; }
      set {
        resin_ = value;
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 10;
    private uint sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "weekly_boss_resin_discount_info" field.</summary>
    public const int WeeklyBossResinDiscountInfoFieldNumber = 12;
    private global::MiHomo.Protos.WeeklyBossResinDiscountInfo weeklyBossResinDiscountInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MiHomo.Protos.WeeklyBossResinDiscountInfo WeeklyBossResinDiscountInfo {
      get { return weeklyBossResinDiscountInfo_; }
      set {
        weeklyBossResinDiscountInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InvestigationMonster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InvestigationMonster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BossChestNum != other.BossChestNum) return false;
      if (CityId != other.CityId) return false;
      if (GroupId != other.GroupId) return false;
      if (Id != other.Id) return false;
      if (IsAlive != other.IsAlive) return false;
      if (IsAreaLocked != other.IsAreaLocked) return false;
      if (Level != other.Level) return false;
      if (LockState != other.LockState) return false;
      if (MaxBossChestNum != other.MaxBossChestNum) return false;
      if (MonsterId != other.MonsterId) return false;
      if (NextBossChestRefreshTime != other.NextBossChestRefreshTime) return false;
      if (NextRefreshTime != other.NextRefreshTime) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (RefreshInterval != other.RefreshInterval) return false;
      if (Resin != other.Resin) return false;
      if (SceneId != other.SceneId) return false;
      if (!object.Equals(WeeklyBossResinDiscountInfo, other.WeeklyBossResinDiscountInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (BossChestNum != 0) hash ^= BossChestNum.GetHashCode();
      if (CityId != 0) hash ^= CityId.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (IsAlive != false) hash ^= IsAlive.GetHashCode();
      if (IsAreaLocked != false) hash ^= IsAreaLocked.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (LockState != global::MiHomo.Protos.InvestigationMonster.Types.LockState.LockNone) hash ^= LockState.GetHashCode();
      if (MaxBossChestNum != 0) hash ^= MaxBossChestNum.GetHashCode();
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      if (NextBossChestRefreshTime != 0) hash ^= NextBossChestRefreshTime.GetHashCode();
      if (NextRefreshTime != 0) hash ^= NextRefreshTime.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (RefreshInterval != 0) hash ^= RefreshInterval.GetHashCode();
      if (Resin != 0) hash ^= Resin.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (weeklyBossResinDiscountInfo_ != null) hash ^= WeeklyBossResinDiscountInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BossChestNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BossChestNum);
      }
      if (LockState != global::MiHomo.Protos.InvestigationMonster.Types.LockState.LockNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LockState);
      }
      if (RefreshInterval != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RefreshInterval);
      }
      if (MaxBossChestNum != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxBossChestNum);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Level);
      }
      if (CityId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CityId);
      }
      if (NextBossChestRefreshTime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(NextBossChestRefreshTime);
      }
      if (Resin != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Resin);
      }
      if (IsAlive != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsAlive);
      }
      if (SceneId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SceneId);
      }
      if (NextRefreshTime != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(NextRefreshTime);
      }
      if (weeklyBossResinDiscountInfo_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(WeeklyBossResinDiscountInfo);
      }
      if (Id != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Id);
      }
      if (pos_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Pos);
      }
      if (IsAreaLocked != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsAreaLocked);
      }
      if (GroupId != 0) {
        output.WriteRawTag(232, 17);
        output.WriteUInt32(GroupId);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(232, 18);
        output.WriteUInt32(MonsterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BossChestNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BossChestNum);
      }
      if (LockState != global::MiHomo.Protos.InvestigationMonster.Types.LockState.LockNone) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LockState);
      }
      if (RefreshInterval != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RefreshInterval);
      }
      if (MaxBossChestNum != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxBossChestNum);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Level);
      }
      if (CityId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CityId);
      }
      if (NextBossChestRefreshTime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(NextBossChestRefreshTime);
      }
      if (Resin != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Resin);
      }
      if (IsAlive != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsAlive);
      }
      if (SceneId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SceneId);
      }
      if (NextRefreshTime != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(NextRefreshTime);
      }
      if (weeklyBossResinDiscountInfo_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(WeeklyBossResinDiscountInfo);
      }
      if (Id != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Id);
      }
      if (pos_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Pos);
      }
      if (IsAreaLocked != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsAreaLocked);
      }
      if (GroupId != 0) {
        output.WriteRawTag(232, 17);
        output.WriteUInt32(GroupId);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(232, 18);
        output.WriteUInt32(MonsterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (BossChestNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BossChestNum);
      }
      if (CityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CityId);
      }
      if (GroupId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (IsAlive != false) {
        size += 1 + 1;
      }
      if (IsAreaLocked != false) {
        size += 1 + 1;
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (LockState != global::MiHomo.Protos.InvestigationMonster.Types.LockState.LockNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LockState);
      }
      if (MaxBossChestNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxBossChestNum);
      }
      if (MonsterId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MonsterId);
      }
      if (NextBossChestRefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextBossChestRefreshTime);
      }
      if (NextRefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextRefreshTime);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (RefreshInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RefreshInterval);
      }
      if (Resin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Resin);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SceneId);
      }
      if (weeklyBossResinDiscountInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeeklyBossResinDiscountInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InvestigationMonster other) {
      if (other == null) {
        return;
      }
      if (other.BossChestNum != 0) {
        BossChestNum = other.BossChestNum;
      }
      if (other.CityId != 0) {
        CityId = other.CityId;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.IsAlive != false) {
        IsAlive = other.IsAlive;
      }
      if (other.IsAreaLocked != false) {
        IsAreaLocked = other.IsAreaLocked;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.LockState != global::MiHomo.Protos.InvestigationMonster.Types.LockState.LockNone) {
        LockState = other.LockState;
      }
      if (other.MaxBossChestNum != 0) {
        MaxBossChestNum = other.MaxBossChestNum;
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      if (other.NextBossChestRefreshTime != 0) {
        NextBossChestRefreshTime = other.NextBossChestRefreshTime;
      }
      if (other.NextRefreshTime != 0) {
        NextRefreshTime = other.NextRefreshTime;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::MiHomo.Protos.Vector();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.RefreshInterval != 0) {
        RefreshInterval = other.RefreshInterval;
      }
      if (other.Resin != 0) {
        Resin = other.Resin;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.weeklyBossResinDiscountInfo_ != null) {
        if (weeklyBossResinDiscountInfo_ == null) {
          WeeklyBossResinDiscountInfo = new global::MiHomo.Protos.WeeklyBossResinDiscountInfo();
        }
        WeeklyBossResinDiscountInfo.MergeFrom(other.WeeklyBossResinDiscountInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BossChestNum = input.ReadUInt32();
            break;
          }
          case 16: {
            LockState = (global::MiHomo.Protos.InvestigationMonster.Types.LockState) input.ReadEnum();
            break;
          }
          case 24: {
            RefreshInterval = input.ReadUInt32();
            break;
          }
          case 32: {
            MaxBossChestNum = input.ReadUInt32();
            break;
          }
          case 40: {
            Level = input.ReadUInt32();
            break;
          }
          case 48: {
            CityId = input.ReadUInt32();
            break;
          }
          case 56: {
            NextBossChestRefreshTime = input.ReadUInt32();
            break;
          }
          case 64: {
            Resin = input.ReadUInt32();
            break;
          }
          case 72: {
            IsAlive = input.ReadBool();
            break;
          }
          case 80: {
            SceneId = input.ReadUInt32();
            break;
          }
          case 88: {
            NextRefreshTime = input.ReadUInt32();
            break;
          }
          case 98: {
            if (weeklyBossResinDiscountInfo_ == null) {
              WeeklyBossResinDiscountInfo = new global::MiHomo.Protos.WeeklyBossResinDiscountInfo();
            }
            input.ReadMessage(WeeklyBossResinDiscountInfo);
            break;
          }
          case 104: {
            Id = input.ReadUInt32();
            break;
          }
          case 114: {
            if (pos_ == null) {
              Pos = new global::MiHomo.Protos.Vector();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 120: {
            IsAreaLocked = input.ReadBool();
            break;
          }
          case 2280: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 2408: {
            MonsterId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            BossChestNum = input.ReadUInt32();
            break;
          }
          case 16: {
            LockState = (global::MiHomo.Protos.InvestigationMonster.Types.LockState) input.ReadEnum();
            break;
          }
          case 24: {
            RefreshInterval = input.ReadUInt32();
            break;
          }
          case 32: {
            MaxBossChestNum = input.ReadUInt32();
            break;
          }
          case 40: {
            Level = input.ReadUInt32();
            break;
          }
          case 48: {
            CityId = input.ReadUInt32();
            break;
          }
          case 56: {
            NextBossChestRefreshTime = input.ReadUInt32();
            break;
          }
          case 64: {
            Resin = input.ReadUInt32();
            break;
          }
          case 72: {
            IsAlive = input.ReadBool();
            break;
          }
          case 80: {
            SceneId = input.ReadUInt32();
            break;
          }
          case 88: {
            NextRefreshTime = input.ReadUInt32();
            break;
          }
          case 98: {
            if (weeklyBossResinDiscountInfo_ == null) {
              WeeklyBossResinDiscountInfo = new global::MiHomo.Protos.WeeklyBossResinDiscountInfo();
            }
            input.ReadMessage(WeeklyBossResinDiscountInfo);
            break;
          }
          case 104: {
            Id = input.ReadUInt32();
            break;
          }
          case 114: {
            if (pos_ == null) {
              Pos = new global::MiHomo.Protos.Vector();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 120: {
            IsAreaLocked = input.ReadBool();
            break;
          }
          case 2280: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 2408: {
            MonsterId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the InvestigationMonster message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum LockState {
        [pbr::OriginalName("LOCK_NONE")] LockNone = 0,
        [pbr::OriginalName("LOCK_QUEST")] LockQuest = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
