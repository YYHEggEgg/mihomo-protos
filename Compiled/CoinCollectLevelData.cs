// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CoinCollectLevelData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MiHomo.Protos {

  /// <summary>Holder for reflection information generated from CoinCollectLevelData.proto</summary>
  public static partial class CoinCollectLevelDataReflection {

    #region Descriptor
    /// <summary>File descriptor for CoinCollectLevelData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CoinCollectLevelDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpDb2luQ29sbGVjdExldmVsRGF0YS5wcm90bxINbWlIb21vLlByb3Rvcxod",
            "Q29pbkNvbGxlY3RUZWFtSW5mb0RhdGEucHJvdG8i3gMKFENvaW5Db2xsZWN0",
            "TGV2ZWxEYXRhEh8KF2RvdWJsZV9iZXN0X2NvbGxlY3RfbnVtGA4gASgNEiAK",
            "GGRvdWJsZV9iZXN0X3Bhc3NfdGltZV9tcxgKIAEoDRJKChpkb3VibGVfYmVz",
            "dF90ZWFtX2luZm9fbGlzdBgMIAMoCzImLm1pSG9tby5Qcm90b3MuQ29pbkNv",
            "bGxlY3RUZWFtSW5mb0RhdGESIQoZaXNfaGF2ZV9wbGF5X2RvdWJsZV9sZXZl",
            "bBgGIAEoCBIhChlpc19oYXZlX3BsYXlfc2luZ2xlX2xldmVsGAsgASgIEiAK",
            "GGlzX2hhdmVfd2F0Y2hlZF9jdXRzY2VuZRgBIAEoCBIVCg1pc19sZXZlbF9v",
            "cGVuGAggASgIEhwKFGxhc3RfY2hvb3NlX3NraWxsX25vGAkgASgNEhAKCGxl",
            "dmVsX2lkGAMgASgNEh8KF3NpbmdsZV9iZXN0X2NvbGxlY3RfbnVtGA8gASgN",
            "EiAKGHNpbmdsZV9iZXN0X3Bhc3NfdGltZV9tcxgCIAEoDRJFChVzaW5nbGVf",
            "YmVzdF90ZWFtX2luZm8YDSABKAsyJi5taUhvbW8uUHJvdG9zLkNvaW5Db2xs",
            "ZWN0VGVhbUluZm9EYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::MiHomo.Protos.CoinCollectTeamInfoDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MiHomo.Protos.CoinCollectLevelData), global::MiHomo.Protos.CoinCollectLevelData.Parser, new[]{ "DoubleBestCollectNum", "DoubleBestPassTimeMs", "DoubleBestTeamInfoList", "IsHavePlayDoubleLevel", "IsHavePlaySingleLevel", "IsHaveWatchedCutscene", "IsLevelOpen", "LastChooseSkillNo", "LevelId", "SingleBestCollectNum", "SingleBestPassTimeMs", "SingleBestTeamInfo" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CoinCollectLevelData : pb::IMessage<CoinCollectLevelData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CoinCollectLevelData> _parser = new pb::MessageParser<CoinCollectLevelData>(() => new CoinCollectLevelData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CoinCollectLevelData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MiHomo.Protos.CoinCollectLevelDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CoinCollectLevelData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CoinCollectLevelData(CoinCollectLevelData other) : this() {
      doubleBestCollectNum_ = other.doubleBestCollectNum_;
      doubleBestPassTimeMs_ = other.doubleBestPassTimeMs_;
      doubleBestTeamInfoList_ = other.doubleBestTeamInfoList_.Clone();
      isHavePlayDoubleLevel_ = other.isHavePlayDoubleLevel_;
      isHavePlaySingleLevel_ = other.isHavePlaySingleLevel_;
      isHaveWatchedCutscene_ = other.isHaveWatchedCutscene_;
      isLevelOpen_ = other.isLevelOpen_;
      lastChooseSkillNo_ = other.lastChooseSkillNo_;
      levelId_ = other.levelId_;
      singleBestCollectNum_ = other.singleBestCollectNum_;
      singleBestPassTimeMs_ = other.singleBestPassTimeMs_;
      singleBestTeamInfo_ = other.singleBestTeamInfo_ != null ? other.singleBestTeamInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CoinCollectLevelData Clone() {
      return new CoinCollectLevelData(this);
    }

    /// <summary>Field number for the "double_best_collect_num" field.</summary>
    public const int DoubleBestCollectNumFieldNumber = 14;
    private uint doubleBestCollectNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DoubleBestCollectNum {
      get { return doubleBestCollectNum_; }
      set {
        doubleBestCollectNum_ = value;
      }
    }

    /// <summary>Field number for the "double_best_pass_time_ms" field.</summary>
    public const int DoubleBestPassTimeMsFieldNumber = 10;
    private uint doubleBestPassTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DoubleBestPassTimeMs {
      get { return doubleBestPassTimeMs_; }
      set {
        doubleBestPassTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "double_best_team_info_list" field.</summary>
    public const int DoubleBestTeamInfoListFieldNumber = 12;
    private static readonly pb::FieldCodec<global::MiHomo.Protos.CoinCollectTeamInfoData> _repeated_doubleBestTeamInfoList_codec
        = pb::FieldCodec.ForMessage(98, global::MiHomo.Protos.CoinCollectTeamInfoData.Parser);
    private readonly pbc::RepeatedField<global::MiHomo.Protos.CoinCollectTeamInfoData> doubleBestTeamInfoList_ = new pbc::RepeatedField<global::MiHomo.Protos.CoinCollectTeamInfoData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::MiHomo.Protos.CoinCollectTeamInfoData> DoubleBestTeamInfoList {
      get { return doubleBestTeamInfoList_; }
    }

    /// <summary>Field number for the "is_have_play_double_level" field.</summary>
    public const int IsHavePlayDoubleLevelFieldNumber = 6;
    private bool isHavePlayDoubleLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsHavePlayDoubleLevel {
      get { return isHavePlayDoubleLevel_; }
      set {
        isHavePlayDoubleLevel_ = value;
      }
    }

    /// <summary>Field number for the "is_have_play_single_level" field.</summary>
    public const int IsHavePlaySingleLevelFieldNumber = 11;
    private bool isHavePlaySingleLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsHavePlaySingleLevel {
      get { return isHavePlaySingleLevel_; }
      set {
        isHavePlaySingleLevel_ = value;
      }
    }

    /// <summary>Field number for the "is_have_watched_cutscene" field.</summary>
    public const int IsHaveWatchedCutsceneFieldNumber = 1;
    private bool isHaveWatchedCutscene_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsHaveWatchedCutscene {
      get { return isHaveWatchedCutscene_; }
      set {
        isHaveWatchedCutscene_ = value;
      }
    }

    /// <summary>Field number for the "is_level_open" field.</summary>
    public const int IsLevelOpenFieldNumber = 8;
    private bool isLevelOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsLevelOpen {
      get { return isLevelOpen_; }
      set {
        isLevelOpen_ = value;
      }
    }

    /// <summary>Field number for the "last_choose_skill_no" field.</summary>
    public const int LastChooseSkillNoFieldNumber = 9;
    private uint lastChooseSkillNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LastChooseSkillNo {
      get { return lastChooseSkillNo_; }
      set {
        lastChooseSkillNo_ = value;
      }
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 3;
    private uint levelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "single_best_collect_num" field.</summary>
    public const int SingleBestCollectNumFieldNumber = 15;
    private uint singleBestCollectNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SingleBestCollectNum {
      get { return singleBestCollectNum_; }
      set {
        singleBestCollectNum_ = value;
      }
    }

    /// <summary>Field number for the "single_best_pass_time_ms" field.</summary>
    public const int SingleBestPassTimeMsFieldNumber = 2;
    private uint singleBestPassTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SingleBestPassTimeMs {
      get { return singleBestPassTimeMs_; }
      set {
        singleBestPassTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "single_best_team_info" field.</summary>
    public const int SingleBestTeamInfoFieldNumber = 13;
    private global::MiHomo.Protos.CoinCollectTeamInfoData singleBestTeamInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MiHomo.Protos.CoinCollectTeamInfoData SingleBestTeamInfo {
      get { return singleBestTeamInfo_; }
      set {
        singleBestTeamInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CoinCollectLevelData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CoinCollectLevelData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DoubleBestCollectNum != other.DoubleBestCollectNum) return false;
      if (DoubleBestPassTimeMs != other.DoubleBestPassTimeMs) return false;
      if(!doubleBestTeamInfoList_.Equals(other.doubleBestTeamInfoList_)) return false;
      if (IsHavePlayDoubleLevel != other.IsHavePlayDoubleLevel) return false;
      if (IsHavePlaySingleLevel != other.IsHavePlaySingleLevel) return false;
      if (IsHaveWatchedCutscene != other.IsHaveWatchedCutscene) return false;
      if (IsLevelOpen != other.IsLevelOpen) return false;
      if (LastChooseSkillNo != other.LastChooseSkillNo) return false;
      if (LevelId != other.LevelId) return false;
      if (SingleBestCollectNum != other.SingleBestCollectNum) return false;
      if (SingleBestPassTimeMs != other.SingleBestPassTimeMs) return false;
      if (!object.Equals(SingleBestTeamInfo, other.SingleBestTeamInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (DoubleBestCollectNum != 0) hash ^= DoubleBestCollectNum.GetHashCode();
      if (DoubleBestPassTimeMs != 0) hash ^= DoubleBestPassTimeMs.GetHashCode();
      hash ^= doubleBestTeamInfoList_.GetHashCode();
      if (IsHavePlayDoubleLevel != false) hash ^= IsHavePlayDoubleLevel.GetHashCode();
      if (IsHavePlaySingleLevel != false) hash ^= IsHavePlaySingleLevel.GetHashCode();
      if (IsHaveWatchedCutscene != false) hash ^= IsHaveWatchedCutscene.GetHashCode();
      if (IsLevelOpen != false) hash ^= IsLevelOpen.GetHashCode();
      if (LastChooseSkillNo != 0) hash ^= LastChooseSkillNo.GetHashCode();
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      if (SingleBestCollectNum != 0) hash ^= SingleBestCollectNum.GetHashCode();
      if (SingleBestPassTimeMs != 0) hash ^= SingleBestPassTimeMs.GetHashCode();
      if (singleBestTeamInfo_ != null) hash ^= SingleBestTeamInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsHaveWatchedCutscene != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsHaveWatchedCutscene);
      }
      if (SingleBestPassTimeMs != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SingleBestPassTimeMs);
      }
      if (LevelId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LevelId);
      }
      if (IsHavePlayDoubleLevel != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsHavePlayDoubleLevel);
      }
      if (IsLevelOpen != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsLevelOpen);
      }
      if (LastChooseSkillNo != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(LastChooseSkillNo);
      }
      if (DoubleBestPassTimeMs != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(DoubleBestPassTimeMs);
      }
      if (IsHavePlaySingleLevel != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsHavePlaySingleLevel);
      }
      doubleBestTeamInfoList_.WriteTo(output, _repeated_doubleBestTeamInfoList_codec);
      if (singleBestTeamInfo_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(SingleBestTeamInfo);
      }
      if (DoubleBestCollectNum != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(DoubleBestCollectNum);
      }
      if (SingleBestCollectNum != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(SingleBestCollectNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsHaveWatchedCutscene != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsHaveWatchedCutscene);
      }
      if (SingleBestPassTimeMs != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SingleBestPassTimeMs);
      }
      if (LevelId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LevelId);
      }
      if (IsHavePlayDoubleLevel != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsHavePlayDoubleLevel);
      }
      if (IsLevelOpen != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsLevelOpen);
      }
      if (LastChooseSkillNo != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(LastChooseSkillNo);
      }
      if (DoubleBestPassTimeMs != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(DoubleBestPassTimeMs);
      }
      if (IsHavePlaySingleLevel != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsHavePlaySingleLevel);
      }
      doubleBestTeamInfoList_.WriteTo(ref output, _repeated_doubleBestTeamInfoList_codec);
      if (singleBestTeamInfo_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(SingleBestTeamInfo);
      }
      if (DoubleBestCollectNum != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(DoubleBestCollectNum);
      }
      if (SingleBestCollectNum != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(SingleBestCollectNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (DoubleBestCollectNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DoubleBestCollectNum);
      }
      if (DoubleBestPassTimeMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DoubleBestPassTimeMs);
      }
      size += doubleBestTeamInfoList_.CalculateSize(_repeated_doubleBestTeamInfoList_codec);
      if (IsHavePlayDoubleLevel != false) {
        size += 1 + 1;
      }
      if (IsHavePlaySingleLevel != false) {
        size += 1 + 1;
      }
      if (IsHaveWatchedCutscene != false) {
        size += 1 + 1;
      }
      if (IsLevelOpen != false) {
        size += 1 + 1;
      }
      if (LastChooseSkillNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastChooseSkillNo);
      }
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelId);
      }
      if (SingleBestCollectNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SingleBestCollectNum);
      }
      if (SingleBestPassTimeMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SingleBestPassTimeMs);
      }
      if (singleBestTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingleBestTeamInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CoinCollectLevelData other) {
      if (other == null) {
        return;
      }
      if (other.DoubleBestCollectNum != 0) {
        DoubleBestCollectNum = other.DoubleBestCollectNum;
      }
      if (other.DoubleBestPassTimeMs != 0) {
        DoubleBestPassTimeMs = other.DoubleBestPassTimeMs;
      }
      doubleBestTeamInfoList_.Add(other.doubleBestTeamInfoList_);
      if (other.IsHavePlayDoubleLevel != false) {
        IsHavePlayDoubleLevel = other.IsHavePlayDoubleLevel;
      }
      if (other.IsHavePlaySingleLevel != false) {
        IsHavePlaySingleLevel = other.IsHavePlaySingleLevel;
      }
      if (other.IsHaveWatchedCutscene != false) {
        IsHaveWatchedCutscene = other.IsHaveWatchedCutscene;
      }
      if (other.IsLevelOpen != false) {
        IsLevelOpen = other.IsLevelOpen;
      }
      if (other.LastChooseSkillNo != 0) {
        LastChooseSkillNo = other.LastChooseSkillNo;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      if (other.SingleBestCollectNum != 0) {
        SingleBestCollectNum = other.SingleBestCollectNum;
      }
      if (other.SingleBestPassTimeMs != 0) {
        SingleBestPassTimeMs = other.SingleBestPassTimeMs;
      }
      if (other.singleBestTeamInfo_ != null) {
        if (singleBestTeamInfo_ == null) {
          SingleBestTeamInfo = new global::MiHomo.Protos.CoinCollectTeamInfoData();
        }
        SingleBestTeamInfo.MergeFrom(other.SingleBestTeamInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsHaveWatchedCutscene = input.ReadBool();
            break;
          }
          case 16: {
            SingleBestPassTimeMs = input.ReadUInt32();
            break;
          }
          case 24: {
            LevelId = input.ReadUInt32();
            break;
          }
          case 48: {
            IsHavePlayDoubleLevel = input.ReadBool();
            break;
          }
          case 64: {
            IsLevelOpen = input.ReadBool();
            break;
          }
          case 72: {
            LastChooseSkillNo = input.ReadUInt32();
            break;
          }
          case 80: {
            DoubleBestPassTimeMs = input.ReadUInt32();
            break;
          }
          case 88: {
            IsHavePlaySingleLevel = input.ReadBool();
            break;
          }
          case 98: {
            doubleBestTeamInfoList_.AddEntriesFrom(input, _repeated_doubleBestTeamInfoList_codec);
            break;
          }
          case 106: {
            if (singleBestTeamInfo_ == null) {
              SingleBestTeamInfo = new global::MiHomo.Protos.CoinCollectTeamInfoData();
            }
            input.ReadMessage(SingleBestTeamInfo);
            break;
          }
          case 112: {
            DoubleBestCollectNum = input.ReadUInt32();
            break;
          }
          case 120: {
            SingleBestCollectNum = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsHaveWatchedCutscene = input.ReadBool();
            break;
          }
          case 16: {
            SingleBestPassTimeMs = input.ReadUInt32();
            break;
          }
          case 24: {
            LevelId = input.ReadUInt32();
            break;
          }
          case 48: {
            IsHavePlayDoubleLevel = input.ReadBool();
            break;
          }
          case 64: {
            IsLevelOpen = input.ReadBool();
            break;
          }
          case 72: {
            LastChooseSkillNo = input.ReadUInt32();
            break;
          }
          case 80: {
            DoubleBestPassTimeMs = input.ReadUInt32();
            break;
          }
          case 88: {
            IsHavePlaySingleLevel = input.ReadBool();
            break;
          }
          case 98: {
            doubleBestTeamInfoList_.AddEntriesFrom(ref input, _repeated_doubleBestTeamInfoList_codec);
            break;
          }
          case 106: {
            if (singleBestTeamInfo_ == null) {
              SingleBestTeamInfo = new global::MiHomo.Protos.CoinCollectTeamInfoData();
            }
            input.ReadMessage(SingleBestTeamInfo);
            break;
          }
          case 112: {
            DoubleBestCollectNum = input.ReadUInt32();
            break;
          }
          case 120: {
            SingleBestCollectNum = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
