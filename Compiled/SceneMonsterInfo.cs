// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SceneMonsterInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MiHomo.Protos {

  /// <summary>Holder for reflection information generated from SceneMonsterInfo.proto</summary>
  public static partial class SceneMonsterInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for SceneMonsterInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SceneMonsterInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZTY2VuZU1vbnN0ZXJJbmZvLnByb3RvEg1taUhvbW8uUHJvdG9zGhZGaXNo",
            "dGFua0Zpc2hJbmZvLnByb3RvGhVNb25zdGVyQm9yblR5cGUucHJvdG8aEk1v",
            "bnN0ZXJSb3V0ZS5wcm90bxoTU2NlbmVGaXNoSW5mby5wcm90bxoVU2NlbmVX",
            "ZWFwb25JbmZvLnByb3RvIrcGChBTY2VuZU1vbnN0ZXJJbmZvEhIKCmFmZml4",
            "X2xpc3QYBiADKA0SFAoMYWlfY29uZmlnX2lkGBMgASgNEhgKEGF0dGFja190",
            "YXJnZXRfaWQYESABKA0SGQoRYXV0aG9yaXR5X3BlZXJfaWQYBSABKA0SEAoI",
            "YmxvY2tfaWQYDSABKA0SMQoJYm9ybl90eXBlGAwgASgOMh4ubWlIb21vLlBy",
            "b3Rvcy5Nb25zdGVyQm9yblR5cGUSEQoJY29uZmlnX2lkGAMgASgNEhAKCGdy",
            "b3VwX2lkGAIgASgNEhQKDGluaXRfcG9zZV9pZBgVIAEoDRIQCghpc19lbGl0",
            "ZRgHIAEoCBIQCghpc19saWdodBgWIAEoCBIQCghraWxsX251bRgXIAEoDRIW",
            "Cg5sZXZlbF9yb3V0ZV9pZBgUIAEoDRIRCgltYXJrX2ZsYWcYDiABKA0SEgoK",
            "bW9uc3Rlcl9pZBgBIAEoDRIyCg1tb25zdGVyX3JvdXRlGBIgASgLMhsubWlI",
            "b21vLlByb3Rvcy5Nb25zdGVyUm91dGUSFwoPb3duZXJfZW50aXR5X2lkGAgg",
            "ASgNEg8KB3Bvc2VfaWQYCyABKA0SFwoPc3BlY2lhbF9uYW1lX2lkGBAgASgN",
            "EhQKDHN1bW1vbmVkX3RhZxgJIAEoDRIQCgh0aXRsZV9pZBgPIAEoDRIzCgt3",
            "ZWFwb25fbGlzdBgEIAMoCzIeLm1pSG9tby5Qcm90b3MuU2NlbmVXZWFwb25J",
            "bmZvEkkKDnN1bW1vbl90YWdfbWFwGAogAygLMjEubWlIb21vLlByb3Rvcy5T",
            "Y2VuZU1vbnN0ZXJJbmZvLlN1bW1vblRhZ01hcEVudHJ5EjEKCWZpc2hfaW5m",
            "bxgyIAEoCzIcLm1pSG9tby5Qcm90b3MuU2NlbmVGaXNoSW5mb0gAEj0KEmZp",
            "c2h0YW5rX2Zpc2hfaW5mbxgzIAEoCzIfLm1pSG9tby5Qcm90b3MuRmlzaHRh",
            "bmtGaXNoSW5mb0gAGjMKEVN1bW1vblRhZ01hcEVudHJ5EgsKA2tleRgBIAEo",
            "DRINCgV2YWx1ZRgCIAEoDToCOAFCCQoHY29udGVudGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::MiHomo.Protos.FishtankFishInfoReflection.Descriptor, global::MiHomo.Protos.MonsterBornTypeReflection.Descriptor, global::MiHomo.Protos.MonsterRouteReflection.Descriptor, global::MiHomo.Protos.SceneFishInfoReflection.Descriptor, global::MiHomo.Protos.SceneWeaponInfoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MiHomo.Protos.SceneMonsterInfo), global::MiHomo.Protos.SceneMonsterInfo.Parser, new[]{ "AffixList", "AiConfigId", "AttackTargetId", "AuthorityPeerId", "BlockId", "BornType", "ConfigId", "GroupId", "InitPoseId", "IsElite", "IsLight", "KillNum", "LevelRouteId", "MarkFlag", "MonsterId", "MonsterRoute", "OwnerEntityId", "PoseId", "SpecialNameId", "SummonedTag", "TitleId", "WeaponList", "SummonTagMap", "FishInfo", "FishtankFishInfo" }, new[]{ "Content" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SceneMonsterInfo : pb::IMessage<SceneMonsterInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SceneMonsterInfo> _parser = new pb::MessageParser<SceneMonsterInfo>(() => new SceneMonsterInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SceneMonsterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MiHomo.Protos.SceneMonsterInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SceneMonsterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SceneMonsterInfo(SceneMonsterInfo other) : this() {
      affixList_ = other.affixList_.Clone();
      aiConfigId_ = other.aiConfigId_;
      attackTargetId_ = other.attackTargetId_;
      authorityPeerId_ = other.authorityPeerId_;
      blockId_ = other.blockId_;
      bornType_ = other.bornType_;
      configId_ = other.configId_;
      groupId_ = other.groupId_;
      initPoseId_ = other.initPoseId_;
      isElite_ = other.isElite_;
      isLight_ = other.isLight_;
      killNum_ = other.killNum_;
      levelRouteId_ = other.levelRouteId_;
      markFlag_ = other.markFlag_;
      monsterId_ = other.monsterId_;
      monsterRoute_ = other.monsterRoute_ != null ? other.monsterRoute_.Clone() : null;
      ownerEntityId_ = other.ownerEntityId_;
      poseId_ = other.poseId_;
      specialNameId_ = other.specialNameId_;
      summonedTag_ = other.summonedTag_;
      titleId_ = other.titleId_;
      weaponList_ = other.weaponList_.Clone();
      summonTagMap_ = other.summonTagMap_.Clone();
      switch (other.ContentCase) {
        case ContentOneofCase.FishInfo:
          FishInfo = other.FishInfo.Clone();
          break;
        case ContentOneofCase.FishtankFishInfo:
          FishtankFishInfo = other.FishtankFishInfo.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SceneMonsterInfo Clone() {
      return new SceneMonsterInfo(this);
    }

    /// <summary>Field number for the "affix_list" field.</summary>
    public const int AffixListFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_affixList_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> affixList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> AffixList {
      get { return affixList_; }
    }

    /// <summary>Field number for the "ai_config_id" field.</summary>
    public const int AiConfigIdFieldNumber = 19;
    private uint aiConfigId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AiConfigId {
      get { return aiConfigId_; }
      set {
        aiConfigId_ = value;
      }
    }

    /// <summary>Field number for the "attack_target_id" field.</summary>
    public const int AttackTargetIdFieldNumber = 17;
    private uint attackTargetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AttackTargetId {
      get { return attackTargetId_; }
      set {
        attackTargetId_ = value;
      }
    }

    /// <summary>Field number for the "authority_peer_id" field.</summary>
    public const int AuthorityPeerIdFieldNumber = 5;
    private uint authorityPeerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AuthorityPeerId {
      get { return authorityPeerId_; }
      set {
        authorityPeerId_ = value;
      }
    }

    /// <summary>Field number for the "block_id" field.</summary>
    public const int BlockIdFieldNumber = 13;
    private uint blockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BlockId {
      get { return blockId_; }
      set {
        blockId_ = value;
      }
    }

    /// <summary>Field number for the "born_type" field.</summary>
    public const int BornTypeFieldNumber = 12;
    private global::MiHomo.Protos.MonsterBornType bornType_ = global::MiHomo.Protos.MonsterBornType.MonsterBornNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MiHomo.Protos.MonsterBornType BornType {
      get { return bornType_; }
      set {
        bornType_ = value;
      }
    }

    /// <summary>Field number for the "config_id" field.</summary>
    public const int ConfigIdFieldNumber = 3;
    private uint configId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "init_pose_id" field.</summary>
    public const int InitPoseIdFieldNumber = 21;
    private uint initPoseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint InitPoseId {
      get { return initPoseId_; }
      set {
        initPoseId_ = value;
      }
    }

    /// <summary>Field number for the "is_elite" field.</summary>
    public const int IsEliteFieldNumber = 7;
    private bool isElite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsElite {
      get { return isElite_; }
      set {
        isElite_ = value;
      }
    }

    /// <summary>Field number for the "is_light" field.</summary>
    public const int IsLightFieldNumber = 22;
    private bool isLight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsLight {
      get { return isLight_; }
      set {
        isLight_ = value;
      }
    }

    /// <summary>Field number for the "kill_num" field.</summary>
    public const int KillNumFieldNumber = 23;
    private uint killNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint KillNum {
      get { return killNum_; }
      set {
        killNum_ = value;
      }
    }

    /// <summary>Field number for the "level_route_id" field.</summary>
    public const int LevelRouteIdFieldNumber = 20;
    private uint levelRouteId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint LevelRouteId {
      get { return levelRouteId_; }
      set {
        levelRouteId_ = value;
      }
    }

    /// <summary>Field number for the "mark_flag" field.</summary>
    public const int MarkFlagFieldNumber = 14;
    private uint markFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MarkFlag {
      get { return markFlag_; }
      set {
        markFlag_ = value;
      }
    }

    /// <summary>Field number for the "monster_id" field.</summary>
    public const int MonsterIdFieldNumber = 1;
    private uint monsterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    /// <summary>Field number for the "monster_route" field.</summary>
    public const int MonsterRouteFieldNumber = 18;
    private global::MiHomo.Protos.MonsterRoute monsterRoute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MiHomo.Protos.MonsterRoute MonsterRoute {
      get { return monsterRoute_; }
      set {
        monsterRoute_ = value;
      }
    }

    /// <summary>Field number for the "owner_entity_id" field.</summary>
    public const int OwnerEntityIdFieldNumber = 8;
    private uint ownerEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OwnerEntityId {
      get { return ownerEntityId_; }
      set {
        ownerEntityId_ = value;
      }
    }

    /// <summary>Field number for the "pose_id" field.</summary>
    public const int PoseIdFieldNumber = 11;
    private uint poseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PoseId {
      get { return poseId_; }
      set {
        poseId_ = value;
      }
    }

    /// <summary>Field number for the "special_name_id" field.</summary>
    public const int SpecialNameIdFieldNumber = 16;
    private uint specialNameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SpecialNameId {
      get { return specialNameId_; }
      set {
        specialNameId_ = value;
      }
    }

    /// <summary>Field number for the "summoned_tag" field.</summary>
    public const int SummonedTagFieldNumber = 9;
    private uint summonedTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SummonedTag {
      get { return summonedTag_; }
      set {
        summonedTag_ = value;
      }
    }

    /// <summary>Field number for the "title_id" field.</summary>
    public const int TitleIdFieldNumber = 15;
    private uint titleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TitleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    /// <summary>Field number for the "weapon_list" field.</summary>
    public const int WeaponListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::MiHomo.Protos.SceneWeaponInfo> _repeated_weaponList_codec
        = pb::FieldCodec.ForMessage(34, global::MiHomo.Protos.SceneWeaponInfo.Parser);
    private readonly pbc::RepeatedField<global::MiHomo.Protos.SceneWeaponInfo> weaponList_ = new pbc::RepeatedField<global::MiHomo.Protos.SceneWeaponInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::MiHomo.Protos.SceneWeaponInfo> WeaponList {
      get { return weaponList_; }
    }

    /// <summary>Field number for the "summon_tag_map" field.</summary>
    public const int SummonTagMapFieldNumber = 10;
    private static readonly pbc::MapField<uint, uint>.Codec _map_summonTagMap_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForUInt32(16, 0), 82);
    private readonly pbc::MapField<uint, uint> summonTagMap_ = new pbc::MapField<uint, uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<uint, uint> SummonTagMap {
      get { return summonTagMap_; }
    }

    /// <summary>Field number for the "fish_info" field.</summary>
    public const int FishInfoFieldNumber = 50;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MiHomo.Protos.SceneFishInfo FishInfo {
      get { return contentCase_ == ContentOneofCase.FishInfo ? (global::MiHomo.Protos.SceneFishInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.FishInfo;
      }
    }

    /// <summary>Field number for the "fishtank_fish_info" field.</summary>
    public const int FishtankFishInfoFieldNumber = 51;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::MiHomo.Protos.FishtankFishInfo FishtankFishInfo {
      get { return contentCase_ == ContentOneofCase.FishtankFishInfo ? (global::MiHomo.Protos.FishtankFishInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.FishtankFishInfo;
      }
    }

    private object content_;
    /// <summary>Enum of possible cases for the "content" oneof.</summary>
    public enum ContentOneofCase {
      None = 0,
      FishInfo = 50,
      FishtankFishInfo = 51,
    }
    private ContentOneofCase contentCase_ = ContentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContentOneofCase ContentCase {
      get { return contentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContent() {
      contentCase_ = ContentOneofCase.None;
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SceneMonsterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SceneMonsterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!affixList_.Equals(other.affixList_)) return false;
      if (AiConfigId != other.AiConfigId) return false;
      if (AttackTargetId != other.AttackTargetId) return false;
      if (AuthorityPeerId != other.AuthorityPeerId) return false;
      if (BlockId != other.BlockId) return false;
      if (BornType != other.BornType) return false;
      if (ConfigId != other.ConfigId) return false;
      if (GroupId != other.GroupId) return false;
      if (InitPoseId != other.InitPoseId) return false;
      if (IsElite != other.IsElite) return false;
      if (IsLight != other.IsLight) return false;
      if (KillNum != other.KillNum) return false;
      if (LevelRouteId != other.LevelRouteId) return false;
      if (MarkFlag != other.MarkFlag) return false;
      if (MonsterId != other.MonsterId) return false;
      if (!object.Equals(MonsterRoute, other.MonsterRoute)) return false;
      if (OwnerEntityId != other.OwnerEntityId) return false;
      if (PoseId != other.PoseId) return false;
      if (SpecialNameId != other.SpecialNameId) return false;
      if (SummonedTag != other.SummonedTag) return false;
      if (TitleId != other.TitleId) return false;
      if(!weaponList_.Equals(other.weaponList_)) return false;
      if (!SummonTagMap.Equals(other.SummonTagMap)) return false;
      if (!object.Equals(FishInfo, other.FishInfo)) return false;
      if (!object.Equals(FishtankFishInfo, other.FishtankFishInfo)) return false;
      if (ContentCase != other.ContentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= affixList_.GetHashCode();
      if (AiConfigId != 0) hash ^= AiConfigId.GetHashCode();
      if (AttackTargetId != 0) hash ^= AttackTargetId.GetHashCode();
      if (AuthorityPeerId != 0) hash ^= AuthorityPeerId.GetHashCode();
      if (BlockId != 0) hash ^= BlockId.GetHashCode();
      if (BornType != global::MiHomo.Protos.MonsterBornType.MonsterBornNone) hash ^= BornType.GetHashCode();
      if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (InitPoseId != 0) hash ^= InitPoseId.GetHashCode();
      if (IsElite != false) hash ^= IsElite.GetHashCode();
      if (IsLight != false) hash ^= IsLight.GetHashCode();
      if (KillNum != 0) hash ^= KillNum.GetHashCode();
      if (LevelRouteId != 0) hash ^= LevelRouteId.GetHashCode();
      if (MarkFlag != 0) hash ^= MarkFlag.GetHashCode();
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      if (monsterRoute_ != null) hash ^= MonsterRoute.GetHashCode();
      if (OwnerEntityId != 0) hash ^= OwnerEntityId.GetHashCode();
      if (PoseId != 0) hash ^= PoseId.GetHashCode();
      if (SpecialNameId != 0) hash ^= SpecialNameId.GetHashCode();
      if (SummonedTag != 0) hash ^= SummonedTag.GetHashCode();
      if (TitleId != 0) hash ^= TitleId.GetHashCode();
      hash ^= weaponList_.GetHashCode();
      hash ^= SummonTagMap.GetHashCode();
      if (contentCase_ == ContentOneofCase.FishInfo) hash ^= FishInfo.GetHashCode();
      if (contentCase_ == ContentOneofCase.FishtankFishInfo) hash ^= FishtankFishInfo.GetHashCode();
      hash ^= (int) contentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MonsterId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MonsterId);
      }
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ConfigId);
      }
      weaponList_.WriteTo(output, _repeated_weaponList_codec);
      if (AuthorityPeerId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(AuthorityPeerId);
      }
      affixList_.WriteTo(output, _repeated_affixList_codec);
      if (IsElite != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsElite);
      }
      if (OwnerEntityId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(OwnerEntityId);
      }
      if (SummonedTag != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SummonedTag);
      }
      summonTagMap_.WriteTo(output, _map_summonTagMap_codec);
      if (PoseId != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(PoseId);
      }
      if (BornType != global::MiHomo.Protos.MonsterBornType.MonsterBornNone) {
        output.WriteRawTag(96);
        output.WriteEnum((int) BornType);
      }
      if (BlockId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(BlockId);
      }
      if (MarkFlag != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(MarkFlag);
      }
      if (TitleId != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(TitleId);
      }
      if (SpecialNameId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(SpecialNameId);
      }
      if (AttackTargetId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(AttackTargetId);
      }
      if (monsterRoute_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(MonsterRoute);
      }
      if (AiConfigId != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(AiConfigId);
      }
      if (LevelRouteId != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(LevelRouteId);
      }
      if (InitPoseId != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(InitPoseId);
      }
      if (IsLight != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsLight);
      }
      if (KillNum != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(KillNum);
      }
      if (contentCase_ == ContentOneofCase.FishInfo) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(FishInfo);
      }
      if (contentCase_ == ContentOneofCase.FishtankFishInfo) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(FishtankFishInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MonsterId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MonsterId);
      }
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ConfigId);
      }
      weaponList_.WriteTo(ref output, _repeated_weaponList_codec);
      if (AuthorityPeerId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(AuthorityPeerId);
      }
      affixList_.WriteTo(ref output, _repeated_affixList_codec);
      if (IsElite != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsElite);
      }
      if (OwnerEntityId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(OwnerEntityId);
      }
      if (SummonedTag != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SummonedTag);
      }
      summonTagMap_.WriteTo(ref output, _map_summonTagMap_codec);
      if (PoseId != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(PoseId);
      }
      if (BornType != global::MiHomo.Protos.MonsterBornType.MonsterBornNone) {
        output.WriteRawTag(96);
        output.WriteEnum((int) BornType);
      }
      if (BlockId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(BlockId);
      }
      if (MarkFlag != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(MarkFlag);
      }
      if (TitleId != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(TitleId);
      }
      if (SpecialNameId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(SpecialNameId);
      }
      if (AttackTargetId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(AttackTargetId);
      }
      if (monsterRoute_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(MonsterRoute);
      }
      if (AiConfigId != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(AiConfigId);
      }
      if (LevelRouteId != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(LevelRouteId);
      }
      if (InitPoseId != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(InitPoseId);
      }
      if (IsLight != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsLight);
      }
      if (KillNum != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(KillNum);
      }
      if (contentCase_ == ContentOneofCase.FishInfo) {
        output.WriteRawTag(146, 3);
        output.WriteMessage(FishInfo);
      }
      if (contentCase_ == ContentOneofCase.FishtankFishInfo) {
        output.WriteRawTag(154, 3);
        output.WriteMessage(FishtankFishInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += affixList_.CalculateSize(_repeated_affixList_codec);
      if (AiConfigId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AiConfigId);
      }
      if (AttackTargetId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AttackTargetId);
      }
      if (AuthorityPeerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AuthorityPeerId);
      }
      if (BlockId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BlockId);
      }
      if (BornType != global::MiHomo.Protos.MonsterBornType.MonsterBornNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BornType);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfigId);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (InitPoseId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(InitPoseId);
      }
      if (IsElite != false) {
        size += 1 + 1;
      }
      if (IsLight != false) {
        size += 2 + 1;
      }
      if (KillNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(KillNum);
      }
      if (LevelRouteId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LevelRouteId);
      }
      if (MarkFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MarkFlag);
      }
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonsterId);
      }
      if (monsterRoute_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MonsterRoute);
      }
      if (OwnerEntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnerEntityId);
      }
      if (PoseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PoseId);
      }
      if (SpecialNameId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SpecialNameId);
      }
      if (SummonedTag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SummonedTag);
      }
      if (TitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TitleId);
      }
      size += weaponList_.CalculateSize(_repeated_weaponList_codec);
      size += summonTagMap_.CalculateSize(_map_summonTagMap_codec);
      if (contentCase_ == ContentOneofCase.FishInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FishInfo);
      }
      if (contentCase_ == ContentOneofCase.FishtankFishInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FishtankFishInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SceneMonsterInfo other) {
      if (other == null) {
        return;
      }
      affixList_.Add(other.affixList_);
      if (other.AiConfigId != 0) {
        AiConfigId = other.AiConfigId;
      }
      if (other.AttackTargetId != 0) {
        AttackTargetId = other.AttackTargetId;
      }
      if (other.AuthorityPeerId != 0) {
        AuthorityPeerId = other.AuthorityPeerId;
      }
      if (other.BlockId != 0) {
        BlockId = other.BlockId;
      }
      if (other.BornType != global::MiHomo.Protos.MonsterBornType.MonsterBornNone) {
        BornType = other.BornType;
      }
      if (other.ConfigId != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.InitPoseId != 0) {
        InitPoseId = other.InitPoseId;
      }
      if (other.IsElite != false) {
        IsElite = other.IsElite;
      }
      if (other.IsLight != false) {
        IsLight = other.IsLight;
      }
      if (other.KillNum != 0) {
        KillNum = other.KillNum;
      }
      if (other.LevelRouteId != 0) {
        LevelRouteId = other.LevelRouteId;
      }
      if (other.MarkFlag != 0) {
        MarkFlag = other.MarkFlag;
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      if (other.monsterRoute_ != null) {
        if (monsterRoute_ == null) {
          MonsterRoute = new global::MiHomo.Protos.MonsterRoute();
        }
        MonsterRoute.MergeFrom(other.MonsterRoute);
      }
      if (other.OwnerEntityId != 0) {
        OwnerEntityId = other.OwnerEntityId;
      }
      if (other.PoseId != 0) {
        PoseId = other.PoseId;
      }
      if (other.SpecialNameId != 0) {
        SpecialNameId = other.SpecialNameId;
      }
      if (other.SummonedTag != 0) {
        SummonedTag = other.SummonedTag;
      }
      if (other.TitleId != 0) {
        TitleId = other.TitleId;
      }
      weaponList_.Add(other.weaponList_);
      summonTagMap_.Add(other.summonTagMap_);
      switch (other.ContentCase) {
        case ContentOneofCase.FishInfo:
          if (FishInfo == null) {
            FishInfo = new global::MiHomo.Protos.SceneFishInfo();
          }
          FishInfo.MergeFrom(other.FishInfo);
          break;
        case ContentOneofCase.FishtankFishInfo:
          if (FishtankFishInfo == null) {
            FishtankFishInfo = new global::MiHomo.Protos.FishtankFishInfo();
          }
          FishtankFishInfo.MergeFrom(other.FishtankFishInfo);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonsterId = input.ReadUInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 24: {
            ConfigId = input.ReadUInt32();
            break;
          }
          case 34: {
            weaponList_.AddEntriesFrom(input, _repeated_weaponList_codec);
            break;
          }
          case 40: {
            AuthorityPeerId = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            affixList_.AddEntriesFrom(input, _repeated_affixList_codec);
            break;
          }
          case 56: {
            IsElite = input.ReadBool();
            break;
          }
          case 64: {
            OwnerEntityId = input.ReadUInt32();
            break;
          }
          case 72: {
            SummonedTag = input.ReadUInt32();
            break;
          }
          case 82: {
            summonTagMap_.AddEntriesFrom(input, _map_summonTagMap_codec);
            break;
          }
          case 88: {
            PoseId = input.ReadUInt32();
            break;
          }
          case 96: {
            BornType = (global::MiHomo.Protos.MonsterBornType) input.ReadEnum();
            break;
          }
          case 104: {
            BlockId = input.ReadUInt32();
            break;
          }
          case 112: {
            MarkFlag = input.ReadUInt32();
            break;
          }
          case 120: {
            TitleId = input.ReadUInt32();
            break;
          }
          case 128: {
            SpecialNameId = input.ReadUInt32();
            break;
          }
          case 136: {
            AttackTargetId = input.ReadUInt32();
            break;
          }
          case 146: {
            if (monsterRoute_ == null) {
              MonsterRoute = new global::MiHomo.Protos.MonsterRoute();
            }
            input.ReadMessage(MonsterRoute);
            break;
          }
          case 152: {
            AiConfigId = input.ReadUInt32();
            break;
          }
          case 160: {
            LevelRouteId = input.ReadUInt32();
            break;
          }
          case 168: {
            InitPoseId = input.ReadUInt32();
            break;
          }
          case 176: {
            IsLight = input.ReadBool();
            break;
          }
          case 184: {
            KillNum = input.ReadUInt32();
            break;
          }
          case 402: {
            global::MiHomo.Protos.SceneFishInfo subBuilder = new global::MiHomo.Protos.SceneFishInfo();
            if (contentCase_ == ContentOneofCase.FishInfo) {
              subBuilder.MergeFrom(FishInfo);
            }
            input.ReadMessage(subBuilder);
            FishInfo = subBuilder;
            break;
          }
          case 410: {
            global::MiHomo.Protos.FishtankFishInfo subBuilder = new global::MiHomo.Protos.FishtankFishInfo();
            if (contentCase_ == ContentOneofCase.FishtankFishInfo) {
              subBuilder.MergeFrom(FishtankFishInfo);
            }
            input.ReadMessage(subBuilder);
            FishtankFishInfo = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MonsterId = input.ReadUInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 24: {
            ConfigId = input.ReadUInt32();
            break;
          }
          case 34: {
            weaponList_.AddEntriesFrom(ref input, _repeated_weaponList_codec);
            break;
          }
          case 40: {
            AuthorityPeerId = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            affixList_.AddEntriesFrom(ref input, _repeated_affixList_codec);
            break;
          }
          case 56: {
            IsElite = input.ReadBool();
            break;
          }
          case 64: {
            OwnerEntityId = input.ReadUInt32();
            break;
          }
          case 72: {
            SummonedTag = input.ReadUInt32();
            break;
          }
          case 82: {
            summonTagMap_.AddEntriesFrom(ref input, _map_summonTagMap_codec);
            break;
          }
          case 88: {
            PoseId = input.ReadUInt32();
            break;
          }
          case 96: {
            BornType = (global::MiHomo.Protos.MonsterBornType) input.ReadEnum();
            break;
          }
          case 104: {
            BlockId = input.ReadUInt32();
            break;
          }
          case 112: {
            MarkFlag = input.ReadUInt32();
            break;
          }
          case 120: {
            TitleId = input.ReadUInt32();
            break;
          }
          case 128: {
            SpecialNameId = input.ReadUInt32();
            break;
          }
          case 136: {
            AttackTargetId = input.ReadUInt32();
            break;
          }
          case 146: {
            if (monsterRoute_ == null) {
              MonsterRoute = new global::MiHomo.Protos.MonsterRoute();
            }
            input.ReadMessage(MonsterRoute);
            break;
          }
          case 152: {
            AiConfigId = input.ReadUInt32();
            break;
          }
          case 160: {
            LevelRouteId = input.ReadUInt32();
            break;
          }
          case 168: {
            InitPoseId = input.ReadUInt32();
            break;
          }
          case 176: {
            IsLight = input.ReadBool();
            break;
          }
          case 184: {
            KillNum = input.ReadUInt32();
            break;
          }
          case 402: {
            global::MiHomo.Protos.SceneFishInfo subBuilder = new global::MiHomo.Protos.SceneFishInfo();
            if (contentCase_ == ContentOneofCase.FishInfo) {
              subBuilder.MergeFrom(FishInfo);
            }
            input.ReadMessage(subBuilder);
            FishInfo = subBuilder;
            break;
          }
          case 410: {
            global::MiHomo.Protos.FishtankFishInfo subBuilder = new global::MiHomo.Protos.FishtankFishInfo();
            if (contentCase_ == ContentOneofCase.FishtankFishInfo) {
              subBuilder.MergeFrom(FishtankFishInfo);
            }
            input.ReadMessage(subBuilder);
            FishtankFishInfo = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
